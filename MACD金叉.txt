# 导入函数库
from __future__ import division      #除数可以显示为float
import jqdata               #导入聚宽函数库
from six import StringIO    #使用聚宽readfile函数
import numpy as np
import pandas as pd
import talib
import time                 #使用time stamp
import datetime          


# 初始化函数，设定基准等等
def initialize(context):
    # 设定沪深300作为基准
    set_benchmark('000300.XSHG')
    # 开启动态复权模式(真实价格)
    set_option('use_real_price', True)
    # 输出内容到日志 log.info()
    log.info('初始函数开始运行且全局只运行一次')
    # 过滤掉order系列API产生的比error级别低的log
    log.set_level('order', 'error')
    
    ### 股票相关设定 ###
    # 股票类每笔交易时的手续费是：买入时佣金万分之三，卖出时佣金万分之三加千分之一印花税, 每笔交易佣金最低扣5块钱
    set_order_cost(OrderCost(close_tax=0.001, open_commission=0.0003, close_commission=0.0003, min_commission=5), type='stock')
    ## 运行函数（reference_security为运行时间的参考标的；传入的标的只做种类区分，因此传入'000300.XSHG'或'510300.XSHG'是一样的）
      # 开盘前运行
    run_daily(before_market_open, time='before_open', reference_security='000300.XSHG') 
      # 开盘时运行
    run_daily(market_open, time='9:35', reference_security='000300.XSHG')
      # 收盘后运行
    run_daily(market_open, time='11:20', reference_security='000300.XSHG')
      # 收盘后运行
    run_daily(market_open, time='14:45', reference_security='000300.XSHG')
      # 收盘后运行

    run_daily(buy_stock, time='11:25', reference_security='000300.XSHG')

    run_daily(after_market_close, time='after_close', reference_security='000300.XSHG')
    
    

    g.available_stock_list = get_index_stocks('000300.XSHG')
    log.info("$$生成可选股票胜者组信息，共%d条"%int(len(g.available_stock_list)))
    
    

    
    # 统计胜率的参数
    g.wins = 0
    g.loses = 0
    g.evens = 0
    

    
## 开盘前运行函数     
def before_market_open(context):
    # 输出运行时间
    log.info('函数运行时间(before_market_open)：'+str(context.current_dt.time()))

    # 因为是5天的周期数，所以通过5天来进行
    price = get_price('000300.XSHG', count = 300, end_date=str(datetime.datetime.strftime(context.current_dt,"%Y-%m-%d")), frequency='1d', \
                                    fields=['open', 'close'], fq='none')
    EMA_gap = talib.EMA(np.array(price['close']), timeperiod=5) - talib.EMA(np.array(price['close']), timeperiod=10)
    
    if EMA_gap[-1]>0:
        g.if_buy = True
    else:
        g.if_buy = False
    
## 开盘时运行函数
def market_open(context):
    log.info('函数运行时间(market_open):'+str(context.current_dt.time()))

    # 每日检查是否股票是否达到卖出条件，如果符合条件则卖出
    balance_stocks(context)
            

def buy_stock(context):
    
    log.info('函数运行时间(buy_stock):'+str(context.current_dt.time()))
    # 如果到了调仓周期，看是否能够买卖        
    buy_list = []
    #确定是否在买卖周期，是否可以买卖
    if g.if_buy:
        buy_list = []
        for stock_name in set(g.available_stock_list):
            stock_price = get_price(stock_name, count = 300, end_date=str(datetime.datetime.strftime(context.current_dt,"%Y-%m-%d")), frequency='1d', 
                                    fields=['open', 'close','volume'], fq='none')

            macd_price = np.array(stock_price['close'])*0.5 + np.array(stock_price['open'])*0.5
                # close_price = close_price.dropna()

            if (len(list(macd_price)) - np.isnan(macd_price).sum()) > 100:
                dif, dea, macd = talib.MACD(np.array(macd_price), fastperiod=5, slowperiod=10, signalperiod=5)
                # 开始判断昨天是否出现金叉，一旦出现金叉，则开始买入
                
                
                if macd[-1] > 0 > macd[-2]:
                    if dif[-1] > 0:
                        # if sum(stock_price['volume'][-5:-1]) > sum(stock_price['volume'][-10:-6]):
                        buy_list.append(stock_name)
                        log.info("$$买入股票：%s，昨日价格为：%f，昨日macd为%f，前日macd为%f" % (str(stock_name),float(macd_price[-1]),float(macd[-1]),float(macd[-2])))
                        

    #  f=pwin/c?ploss/b
    # f：仓位比例
    # Pwin：赌赢的概率―股市上涨概率
    # Ploss：赌输的概率―股市下跌概率
    # b：赢钱率（资产从1增加到1+b）
    # c：损失率（资产从1减少到1-c）
    # 本例中：Pwin为0.52，Ploss为0.48，赢钱率为0.02，损失率为0.015
    # 最后得出f = 0.52/0.015 - 0.48/0.02 = 10.6
    cash = context.portfolio.available_cash
    for sec in buy_list:
        order_target_value(sec, 5000)
        
## 收盘后运行函数  
def after_market_close(context):
    log.info(str('函数运行时间(after_market_close):'+str(context.current_dt.time())))
    #得到当天所有成交记录
    i = 1
    for sec in context.portfolio.positions.keys():
        log.info('$$%d、 持仓：%s，持仓天数：%d，收益率为 %f，总价值：%f' %(i, \
        str(context.portfolio.positions[sec].security), \
        int((context.current_dt - context.portfolio.positions[sec].init_time).days), \
        float((context.portfolio.positions[sec].price - context.portfolio.positions[sec].avg_cost)/context.portfolio.positions[sec].avg_cost), \
        float(context.portfolio.positions[sec].value)
        ))
        i += 1
        
        
    # 整体持仓情况
    log.info("$$总价值：%f，持仓价值%f"%(float(context.portfolio.total_value),float(context.portfolio.positions_value)))




    # 统计整体回测的胜率结果
    log.info("$$胜败结果为：")
    log.info("1、获胜次数：%d"%int(g.wins))
    log.info("2、失败次数：%d"%int(g.loses))
    log.info("3、平局次数：%d"%int(g.evens))
    log.info("4、整体胜率：%f"%float(((g.wins)/( g.wins + g.loses))) if (g.wins + g.loses) != 0 else 0)
    
    log.info('一天结束')
    log.info('##############################################################')



    
# 每天对股票进行检查，符合条件则卖出
# 条件如下：
# 1、止盈：收益率超过1.02
# 2、止损：收益率低于0.985
# 3、超过8天没有确定
def balance_stocks(context):
    log.info("$$开始验证是否卖出")
    sell_list = []
    for sec in context.portfolio.positions.keys():
        # print "股票：%s" % sec
        # print "现价: %f" % context.portfolio.positions[sec].price
        # print "成本：%f" % context.portfolio.positions[sec].avg_cost
        if context.portfolio.positions[sec].price/context.portfolio.positions[sec].avg_cost > 1.02:
            sell_list.append(sec)
            g.wins += 1
        elif context.portfolio.positions[sec].price/context.portfolio.positions[sec].avg_cost < 0.985:
            sell_list.append(sec)
            g.loses += 1
        elif int((context.current_dt - context.portfolio.positions[sec].init_time).days) > 3:
            sell_list.append(sec)
            g.evens += 1

    # 清仓
    for sec in sell_list:
        log.info("$$卖出股票：%s，持仓天数%d"%(str(sec),int((context.current_dt - context.portfolio.positions[sec].init_time).days)))
        order_target_value(sec, 0)
        
